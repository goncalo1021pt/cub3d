// divide a square in 4 smaller squares and find the center of each square including the parent square ^^

typedef struct s_subd
{
	t_point	tl_cent;
	t_point	tr_cent;
	t_point	center;
	t_point	bl_cent;
	t_point	br_cent;
} t_subd;

void subdivide_square(t_session *instance, t_subd *subd_points, int x, int y, int sq_size)
{
	int quarter = sq_size / 2;

	subd_points->tl_cent.x = x - quarter / 2;
	subd_points->tl_cent.y = y - quarter / 2;
	pixel_put(&(instance->mlx_img), subd_points->tl_cent.x, subd_points->tl_cent.y, 0xFF0000);

	subd_points->tr_cent.x = x + quarter / 2;
	subd_points->tr_cent.y = y - quarter / 2;
	pixel_put(&(instance->mlx_img), subd_points->tr_cent.x, subd_points->tr_cent.y, 0x00FF00);

	subd_points->center.x = x;
	subd_points->center.y = y;
	pixel_put(&(instance->mlx_img), subd_points->center.x, subd_points->center.y, 0x0000FF);

	subd_points->bl_cent.x = x - quarter / 2;
	subd_points->bl_cent.y = y + quarter / 2;
	pixel_put(&(instance->mlx_img), subd_points->bl_cent.x, subd_points->bl_cent.y, 0xFFFF00);

	subd_points->br_cent.x = x + quarter / 2;
	subd_points->br_cent.y = y + quarter / 2;
	pixel_put(&(instance->mlx_img), subd_points->br_cent.x, subd_points->br_cent.y, 0xFF00FF);
}


void draw_grid(t_session *instance)
{
	t_point		top;
	int			sq;
	int			y;
	int			x;

	sq = MAP_SCALE;
	y = 0;
	while (instance->map.map[y])
	{
		x = 0;
		while (instance->map.map[y][x])
		{
			top.y = y * sq;
			top.x = x * sq;
			if (instance->map.map[y][x] == '1')
				draw_square(instance, top, sq, 0x100000);
			x++;
		}
		y++;
	}
}

typedef struct s_camera2d
{
	t_point	top_l;
	t_point	bot_r;
	t_point	p_pos;
	t_point size;
}	t_camera2d;

void	init_camera2d(t_session *instance, t_camera2d *cam2d)
{
	cam2d->size.x = MAP_SCALE * 6;
	cam2d->size.y = MAP_SCALE * 4;

	cam2d->p_pos.x = instance->player.x;
	cam2d->p_pos.y = instance->player.y;

	cam2d->top_l.x = fmax(0, instance->player.x - cam2d->size.x / 2);
	cam2d->top_l.y = fmax(0, instance->player.y - cam2d->size.y / 2);

	cam2d->bot_r.x = fmin(W_WIDTH - 1, instance->player.x + cam2d->size.x / 2);
	cam2d->bot_r.y = fmin(W_HEIGHT - 1, instance->player.y + cam2d->size.y / 2);
}

void	draw_scaled(t_session *instance)
{
	int			y;
	int			x;
	//t_camera2d	cam2d;

	y = 0;
	//init_camera2d(instance, &cam2d);
	while (instance->map.grid[y])
	{
		x = 0;
		while (instance->map.grid[y][x])
		{
			if (instance->map.grid[y][x] == '1')
				pixel_put(&(instance->mlx_img), x, y, 0xff4500);
			else if (instance->map.grid[y][x] == '0')
				pixel_put(&(instance->mlx_img), x, y, 0xffffff);
			x++;
		}
		y++;
	}
	draw_grid(instance);
	draw_player(instance, instance->player.x, instance->player.y);
}
