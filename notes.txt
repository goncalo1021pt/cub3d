// divide a square in 4 smaller squares and find the center of each square including the parent square ^^

typedef struct s_subd
{
	t_point	tl_cent;
	t_point	tr_cent;
	t_point	center;
	t_point	bl_cent;
	t_point	br_cent;
} t_subd;

void subdivide_square(t_session *instance, t_subd *subd_points, int x, int y, int sq_size)
{
	int quarter = sq_size / 2;

	subd_points->tl_cent.x = x - quarter / 2;
	subd_points->tl_cent.y = y - quarter / 2;
	pixel_put(&(instance->mlx_img), subd_points->tl_cent.x, subd_points->tl_cent.y, 0xFF0000);

	subd_points->tr_cent.x = x + quarter / 2;
	subd_points->tr_cent.y = y - quarter / 2;
	pixel_put(&(instance->mlx_img), subd_points->tr_cent.x, subd_points->tr_cent.y, 0x00FF00);

	subd_points->center.x = x;
	subd_points->center.y = y;
	pixel_put(&(instance->mlx_img), subd_points->center.x, subd_points->center.y, 0x0000FF);

	subd_points->bl_cent.x = x - quarter / 2;
	subd_points->bl_cent.y = y + quarter / 2;
	pixel_put(&(instance->mlx_img), subd_points->bl_cent.x, subd_points->bl_cent.y, 0xFFFF00);

	subd_points->br_cent.x = x + quarter / 2;
	subd_points->br_cent.y = y + quarter / 2;
	pixel_put(&(instance->mlx_img), subd_points->br_cent.x, subd_points->br_cent.y, 0xFF00FF);
}


void draw_grid(t_session *instance)
{
	t_point		top;
	int			sq;
	int			y;
	int			x;

	sq = MAP_SCALE;
	y = 0;
	while (instance->map.map[y])
	{
		x = 0;
		while (instance->map.map[y][x])
		{
			top.y = y * sq;
			top.x = x * sq;
			if (instance->map.map[y][x] == '1')
				draw_square(instance, top, sq, 0x100000);
			x++;
		}
		y++;
	}
}

typedef struct s_camera2d
{
	t_point	top_l;
	t_point	bot_r;
	t_point	p_pos;
	t_point size;
}	t_camera2d;

void	init_camera2d(t_session *instance, t_camera2d *cam2d)
{
	cam2d->size.x = MAP_SCALE * 6;
	cam2d->size.y = MAP_SCALE * 4;

	cam2d->p_pos.x = instance->player.x;
	cam2d->p_pos.y = instance->player.y;

	cam2d->top_l.x = fmax(0, instance->player.x - cam2d->size.x / 2);
	cam2d->top_l.y = fmax(0, instance->player.y - cam2d->size.y / 2);

	cam2d->bot_r.x = fmin(W_WIDTH - 1, instance->player.x + cam2d->size.x / 2);
	cam2d->bot_r.y = fmin(W_HEIGHT - 1, instance->player.y + cam2d->size.y / 2);
}

void	draw_scaled(t_session *instance)
{
	int			y;
	int			x;
	//t_camera2d	cam2d;

	y = 0;
	//init_camera2d(instance, &cam2d);
	while (instance->map.grid[y])
	{
		x = 0;
		while (instance->map.grid[y][x])
		{
			if (instance->map.grid[y][x] == '1')
				pixel_put(&(instance->mlx_img), x, y, 0xff4500);
			else if (instance->map.grid[y][x] == '0')
				pixel_put(&(instance->mlx_img), x, y, 0xffffff);
			x++;
		}
		y++;
	}
	draw_grid(instance);
	draw_player(instance, instance->player.x, instance->player.y);
}


https://github.com/vinibiavatti1/RayCastingTutorial/wiki/Fisheye-fix
https://lodev.org/cgtutor/raycasting.html

void	init_ray(t_dda *dda, t_point start, t_point end)
{
	float	norm;

	dda->current_x = start.x;
	dda->current_y = start.y;
	dda->delta_x = end.x - start.x;
	dda->delta_y = end.y - start.y;
	dda->step = fmax(fabs(dda->delta_x), fabs(dda->delta_y));
	dda->x_inc = (dda->delta_x / dda->step);
	dda->y_inc = (dda->delta_y / dda->step);
	norm = sqrt(pow(dda->x_inc, 2) + pow(dda->y_inc, 2));
	dda->x_inc = dda->x_inc / norm;
	dda->y_inc = dda->y_inc / norm;
}


// void	camera3D(t_session *instance, double pos_x, double pos_y)
// {
// 	t_camera3D	camera;
// 	t_ray		ray;
// 	t_slice		slice;
// 	int	i;

// 	init_camera3D(instance, &camera);
// 	i = 0;
// 	while (i < W_WIDTH) //i < n_rays
// 	{
// 		init_ray(&camera, &ray, i, pos_x, pos_y);
// 		aim_ray(&ray, pos_x, pos_y);
// 		cast_ray(instance, &ray);
// 		if (ray.perp_wall_dist > 0)
// 		{
// 			slice.height = (int)(W_HEIGHT / ray.perp_wall_dist * MAP_SCALE);
// 			slice.start = -slice.height / 2 + W_HEIGHT / 2;
// 			slice.end = slice.height / 2 + W_HEIGHT / 2;
// 			slice.start = clamp_slice(slice.start);
// 			slice.end = clamp_slice(slice.end);
// 			// texture.line_h = ray.perp_wall_dist * MAP_SCALE;
// 			if (ray.wall_dir == NORTH_TEXTURE)
// 				slice.color = 0x8fbc8f;
// 			else if (ray.wall_dir == SOUTH_TEXTURE)
// 				slice.color = 0x2e8b57;
// 			else if (ray.wall_dir == EAST_TEXTURE)
// 				slice.color = 0x3cb371;
// 			else if (ray.wall_dir == WEST_TEXTURE)
// 				slice.color = 0x20b2aa;
// 			draw_line(instance, (t_point){i, slice.start}, (t_point){i, slice.end}, slice.color);
// 		}
// 		// printf("%d\n", ray.wall_x);
// 		i++;
// 	}
// }
